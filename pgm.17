import numpy as np

# Define the environment
class Environment:
    def __init__(self, num_states, num_actions):
        self.num_states = num_states
        self.num_actions = num_actions
        self.transition_matrix = np.random.rand(num_states, num_actions, num_states)
        self.reward_matrix = np.random.rand(num_states, num_actions)

    def step(self, state, action):
        next_state = np.random.choice(self.num_states, p=self.transition_matrix[state, action])
        reward = self.reward_matrix[state, action]
        return next_state, reward

# Define TD(0) agent
class TDAgent:
    def __init__(self, num_states, num_actions, alpha=0.1, gamma=0.9):
        self.num_states = num_states
        self.num_actions = num_actions
        self.alpha = alpha
        self.gamma = gamma
        self.values = np.zeros(num_states)

    def update(self, state, next_state, reward):
        td_target = reward + self.gamma * self.values[next_state]
        td_error = td_target - self.values[state]
        self.values[state] += self.alpha * td_error

# Define SARSA agent
class SARSAgent:
    def __init__(self, num_states, num_actions, alpha=0.1, gamma=0.9, epsilon=0.1):
        self.num_states = num_states
        self.num_actions = num_actions
        self.alpha = alpha
        self.gamma = gamma
        self.epsilon = epsilon
        self.q_values = np.zeros((num_states, num_actions))

    def choose_action(self, state):
        if np.random.rand() < self.epsilon:
            return np.random.choice(self.num_actions)
        else:
            return np.argmax(self.q_values[state])

    def update(self, state, action, next_state, next_action, reward):
        td_target = reward + self.gamma * self.q_values[next_state, next_action]
        td_error = td_target - self.q_values[state, action]
        self.q_values[state, action] += self.alpha * td_error

# Define Q-learning agent
class QLearningAgent:
    def __init__(self, num_states, num_actions, alpha=0.1, gamma=0.9, epsilon=0.1):
        self.num_states = num_states
        self.num_actions = num_actions
        self.alpha = alpha
        self.gamma = gamma
        self.epsilon = epsilon
        self.q_values = np.zeros((num_states, num_actions))

    def choose_action(self, state):
        if np.random.rand() < self.epsilon:
            return np.random.choice(self.num_actions)
        else:
            return np.argmax(self.q_values[state])

    def update(self, state, action, next_state, reward):
        td_target = reward + self.gamma * np.max(self.q_values[next_state])
        td_error = td_target - self.q_values[state, action]
        self.q_values[state, action] += self.alpha * td_error

# Train the agents
def train_agent(agent, env, num_episodes):
    total_rewards = []
    for episode in range(num_episodes):
        state = np.random.randint(env.num_states)
        total_reward = 0
        while True:
            action = agent.choose_action(state)
            next_state, reward = env.step(state, action)
            agent.update(state, action, next_state, reward)
            total_reward += reward
            state = next_state
            if total_reward >= 100:  # Stop early if agent achieves high reward
                break
        total_rewards.append(total_reward)
    return total_rewards

# Define the environment parameters
num_states = 10
num_actions = 2
num_episodes = 1000

# Create the environment
env = Environment(num_states, num_actions)

# Train the agents
td_agent = TDAgent(num_states, num_actions)
sarsa_agent = SARSAgent(num_states, num_actions)
q_learning_agent = QLearningAgent(num_states, num_actions)

td_rewards = train_agent(td_agent, env, num_episodes)
sarsa_rewards = train_agent(sarsa_agent, env, num_episodes)
q_learning_rewards = train_agent(q_learning_agent, env, num_episodes)

# Compare performances
print("Average total rewards:")
print("TD Agent:", np.mean(td_rewards))
print("SARSA Agent:", np.mean(sarsa_rewards))
print("Q-learning Agent:", np.mean(q_learning_rewards))
